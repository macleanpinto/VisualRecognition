package com.tmt.cognitive.challenge.visualrecognition.vo;

// Generated Oct 27, 2017 5:49:04 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Visualrecognitionaudittransaction generated by hbm2java
 */
@Entity
@Table(name = "visualrecognitionaudittransaction")
public class Visualrecognitionaudittransaction implements java.io.Serializable {

	private Long transactionid;
	private Userproductscoremapping userproductscoremapping;
	private Visualrecognisionuserprofiles visualrecognisionuserprofiles;
	private Userproductadsmapping userproductadsmapping;
	private Commercialproductsprofile commercialproductsprofile;
	private double age;
	private String gender;
	private String emotioncheckresult;
	private Date createdtime;
	private String createdby;
	private Date updatedtime;
	private String updatedby;

	public Visualrecognitionaudittransaction() {
	}

	public Visualrecognitionaudittransaction(
			Userproductscoremapping userproductscoremapping,
			Visualrecognisionuserprofiles visualrecognisionuserprofiles,
			Userproductadsmapping userproductadsmapping,
			Commercialproductsprofile commercialproductsprofile,
			double age, String gender) {
		this.userproductscoremapping = userproductscoremapping;
		this.visualrecognisionuserprofiles = visualrecognisionuserprofiles;
		this.userproductadsmapping = userproductadsmapping;
		this.commercialproductsprofile = commercialproductsprofile;
		this.age = age;
		this.gender = gender;
	}

	public Visualrecognitionaudittransaction(
			Userproductscoremapping userproductscoremapping,
			Visualrecognisionuserprofiles visualrecognisionuserprofiles,
			Userproductadsmapping userproductadsmapping,
			Commercialproductsprofile commercialproductsprofile,
			double age, String gender,
			String emotioncheckresult, Date createdtime, String createdby,
			Date updatedtime, String updatedby) {
		this.userproductscoremapping = userproductscoremapping;
		this.visualrecognisionuserprofiles = visualrecognisionuserprofiles;
		this.userproductadsmapping = userproductadsmapping;
		this.commercialproductsprofile = commercialproductsprofile;
		this.age = age;
		this.gender = gender;
		this.emotioncheckresult = emotioncheckresult;
		this.createdtime = createdtime;
		this.createdby = createdby;
		this.updatedtime = updatedtime;
		this.updatedby = updatedby;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "TRANSACTIONID", unique = true, nullable = false)
	public Long getTransactionid() {
		return this.transactionid;
	}

	public void setTransactionid(Long transactionid) {
		this.transactionid = transactionid;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "SCOREMAPPINGID", nullable = false)
	public Userproductscoremapping getUserproductscoremapping() {
		return this.userproductscoremapping;
	}

	public void setUserproductscoremapping(
			Userproductscoremapping userproductscoremapping) {
		this.userproductscoremapping = userproductscoremapping;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "USERPROFILEID", nullable = false)
	public Visualrecognisionuserprofiles getVisualrecognisionuserprofiles() {
		return this.visualrecognisionuserprofiles;
	}

	public void setVisualrecognisionuserprofiles(
			Visualrecognisionuserprofiles visualrecognisionuserprofiles) {
		this.visualrecognisionuserprofiles = visualrecognisionuserprofiles;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "ADSMAPPINGID", nullable = false)
	public Userproductadsmapping getUserproductadsmapping() {
		return this.userproductadsmapping;
	}

	public void setUserproductadsmapping(
			Userproductadsmapping userproductadsmapping) {
		this.userproductadsmapping = userproductadsmapping;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "PRODUCTID", nullable = false)
	public Commercialproductsprofile getCommercialproductsprofile() {
		return this.commercialproductsprofile;
	}

	public void setCommercialproductsprofile(
			Commercialproductsprofile commercialproductsprofile) {
		this.commercialproductsprofile = commercialproductsprofile;
	}

	@Column(name = "AGE", nullable = false)
	public double getAge() {
		return this.age;
	}

	public void setAge(double age) {
		this.age = age;
	}

	@Column(name = "GENDER", nullable = false, length = 45)
	public String getGender() {
		return this.gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	@Column(name = "EMOTIONCHECKRESULT", length = 100)
	public String getEmotioncheckresult() {
		return this.emotioncheckresult;
	}

	public void setEmotioncheckresult(String emotioncheckresult) {
		this.emotioncheckresult = emotioncheckresult;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATEDTIME", length = 19)
	public Date getCreatedtime() {
		return this.createdtime;
	}

	public void setCreatedtime(Date createdtime) {
		this.createdtime = createdtime;
	}

	@Column(name = "CREATEDBY", length = 45)
	public String getCreatedby() {
		return this.createdby;
	}

	public void setCreatedby(String createdby) {
		this.createdby = createdby;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "UPDATEDTIME", length = 19)
	public Date getUpdatedtime() {
		return this.updatedtime;
	}

	public void setUpdatedtime(Date updatedtime) {
		this.updatedtime = updatedtime;
	}

	@Column(name = "UPDATEDBY", length = 45)
	public String getUpdatedby() {
		return this.updatedby;
	}

	public void setUpdatedby(String updatedby) {
		this.updatedby = updatedby;
	}

}
